{"version":3,"sources":["components/error-indicator/death-star.jpg","components/header/index.js","components/header/header.js","services/swapiServices.js","components/spinner/spinner.js","components/error-indicator/error-indicator.js","components/random-planet/random-planet.js","components/random-planet/index.js","components/item-list/index.js","components/item-list/item-list.js","components/person-details/index.js","components/person-details/person-details.js","components/app/index.js","components/app/app.js","index.js"],"names":["module","exports","Header","className","href","SwapiService","_apiBase","_transformPlanet","planet","id","_extractId","name","population","rotationPeriod","rotation_period","diameter","_transformStarship","starship","model","manufacturer","costInCredits","length","crew","passengers","cargoCapacity","_transformPerson","person","gender","birthYear","birth_year","eyeColor","eye_color","url","fetch","this","res","ok","Error","status","json","getResource","results","map","item","match","Spinner","ErrorIndicator","src","icon","alt","RandomPlanet","state","loading","onPlanetLoaded","setState","error","onError","e","updatePlanet","Math","floor","random","getPlanet","then","catch","interval","setInterval","clearInterval","hasData","errorMessage","spinner","content","Component","PlanetView","ItemList","peopleList","getAllPeople","arr","key","onClick","props","onItemSelected","items","renderItems","PersonDetails","updatePerson","prevProps","personId","getPerson","App","selectedPerson","onPersonSelected","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a5f85dff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/death-star.c0d3f101.jpg\";","import Header from \"./header\";\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nimport \"./header.css\"\r\n\r\nconst Header = () => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\r\n            <div className=\"container fontStyle\">\r\n                <a className=\"navbar-brand text-info font-weight-bold text-brand\" href=\"../../../public/index.html\">StarWarsDB</a>\r\n\r\n                <div className=\"collapse navbar-collapse ulList\">\r\n                    <ul className=\"navbar-nav d-flex\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"../../../public/index.html\">Peoples</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"../../../public/index.html\">Planets</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"../../../public/index.html\">Starships</a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n};\r\n\r\nexport default Header;","export default class SwapiService {\r\n\r\n    _apiBase = \"https://swapi.dev/api\";\r\n\r\n    async getResource(url) {\r\n        const res = await fetch(`${this._apiBase}${url}`);\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, received ${res.status}`)\r\n        };\r\n        return await res.json();\r\n    }\r\n\r\n    async getAllPeople() {\r\n        const res = await this.getResource(`/people/`);\r\n        return res.results.map(this._transformPerson);\r\n    }\r\n\r\n    async getPerson(id) {\r\n        const person = await this.getResource(`/people/${id}/`);\r\n        return this._transformPerson(person);\r\n    }\r\n\r\n    async getAllPlanets() {\r\n        const res = await this.getResource(`/planets/`);\r\n        return res.results.map(this._transformPlanet);\r\n    }\r\n\r\n    async getPlanet(id) {\r\n        const planet = await this.getResource(`/planets/${id}/`);\r\n        return this._transformPlanet(planet);\r\n    }\r\n\r\n    async getAllStarships() {\r\n        const res = await this.getResource(`/starships/`);\r\n        return res.results.map(this._transformStarship);\r\n    }\r\n\r\n    async getStarship(id) {\r\n        const starship = this.getResource(`/starships/${id}/`);\r\n        return this._transformStarship(starship);\r\n    }\r\n\r\n    _extractId(item) {\r\n        const idRegExp = /\\/([0-9]*)\\/$/;\r\n        return item.url.match(idRegExp)[1];\r\n    }\r\n\r\n    _transformPlanet = (planet) => {\r\n        return {\r\n            id: this._extractId(planet),\r\n            name: planet.name,\r\n            population: planet.population,\r\n            rotationPeriod: planet.rotation_period,\r\n            diameter: planet.diameter\r\n        };\r\n    }\r\n\r\n    _transformStarship = (starship) => {\r\n        return {\r\n            id: this._extractId(starship),\r\n            name: starship.name,\r\n            model: starship.model,\r\n            manufacturer: starship.manufacturer,\r\n            costInCredits: starship.costInCredits,\r\n            length: starship.length,\r\n            crew: starship.crew,\r\n            passengers: starship.passengers,\r\n            cargoCapacity: starship.cargoCapacity\r\n        }\r\n    }\r\n\r\n    _transformPerson = (person) => {\r\n        return {\r\n            id: this._extractId(person),\r\n            name: person.name,\r\n            gender: person.gender,\r\n            birthYear: person.birth_year,\r\n            eyeColor: person.eye_color\r\n        }\r\n    }\r\n\r\n};","import React from 'react';\r\n\r\nimport \"./spinner.css\"\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"load\">\r\n            <div className=\"loadingio-spinner-double-ring-f2gsivkskhw\">\r\n                <div className=\"ldio-3fywb51tq1c\">\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div>\r\n                        <div></div>\r\n                    </div>\r\n                    <div>\r\n                        <div></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Spinner;","\r\nimport React from 'react';\r\n\r\nimport './error-indicator.css';\r\nimport icon from './death-star.jpg';\r\n\r\nconst ErrorIndicator = () => {\r\n    return (\r\n        <div className=\"error-indicator\">\r\n            <img src={icon} alt=\"error icon\" />\r\n            <span className=\"boom\"><h2>BOOM!</h2></span>\r\n            <span>\r\n                <h4>\r\n                    Something has gone terribly wrong\r\n                </h4>\r\n            </span>\r\n            <span>\r\n                <h5>\r\n                    (but we already sent droids to fix it)\r\n                </h5>\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorIndicator;","import React, { Component, Fragment } from 'react';\r\n\r\nimport './random-planet.css';\r\n\r\nimport SwapiService from './../../services/swapiServices';\r\nimport Spinner from '../spinner/spinner';\r\nimport ErrorIndicator from \"../error-indicator/error-indicator\"\r\n\r\nexport default class RandomPlanet extends Component {\r\n\r\n    SwapiService = new SwapiService();\r\n\r\n    state = {\r\n        planet: {},\r\n        loading: true\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.updatePlanet();\r\n        this.interval = setInterval(this.updatePlanet, 3000);\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval); \r\n    }\r\n\r\n    onPlanetLoaded = (planet) => {\r\n        this.setState({\r\n            planet,\r\n            loading: false,\r\n            error: false\r\n        });\r\n    };\r\n\r\n    onError = (e) => {\r\n        this.setState({\r\n            error: true,\r\n            loading: false\r\n        });\r\n    }\r\n\r\n    updatePlanet = () => {\r\n        const id = Math.floor(Math.random() * 25) + 3;\r\n        this.SwapiService\r\n            .getPlanet(id)\r\n            .then(this.onPlanetLoaded)\r\n            .catch(this.onError);\r\n    };\r\n\r\n    render() {\r\n\r\n        const { planet, loading, error } = this.state;\r\n\r\n        const hasData = !(loading || error);\r\n\r\n        const errorMessage = error ? <ErrorIndicator /> : null;\r\n        const spinner = loading ? <Spinner /> : null;\r\n        const content = hasData ? <PlanetView planet={planet} /> : null;\r\n\r\n        return (\r\n            <div className=\"random-planet jumbotron rounded\">\r\n                {errorMessage}\r\n                {spinner}\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst PlanetView = ({ planet }) => {\r\n    const { id, name, population, rotationPeriod, diameter } = planet;\r\n\r\n    return (\r\n        <Fragment>\r\n            <img className=\"img-fluid planet-image\" alt=\"planet\"\r\n                src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`} />\r\n            <div>\r\n                <h3>{name}</h3>\r\n                <ul className=\"list-group list-group-flush\">\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Population:</span>\r\n                        <span>{population}</span>\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Rotation Period:</span>\r\n                        <span>{rotationPeriod}</span>\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Diameter:</span>\r\n                        <span>{diameter}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}","import RandomPlanet from './random-planet';\r\n\r\nexport default RandomPlanet;","import ItemList from \"./item-list\";\r\n\r\nexport default ItemList;","import React, { Component } from 'react';\r\n\r\nimport \"./item-list.css\"\r\nimport SwapiService from './../../services/swapiServices';\r\nimport Spinner from '../spinner/spinner';\r\n\r\nexport default class ItemList extends Component {\r\n\r\n    SwapiService = new SwapiService();\r\n\r\n    state = {\r\n        peopleList: null\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.SwapiService\r\n            .getAllPeople()\r\n            .then((peopleList) => {\r\n                this.setState({\r\n                    peopleList\r\n                });\r\n            });\r\n    };\r\n\r\n    renderItems(arr) {\r\n        return arr.map(({ id, name }) => {\r\n            return (\r\n                <li\r\n                    className=\"list-group-item list-active\"\r\n                    key={id}\r\n                    onClick={() => this.props.onItemSelected(id)}\r\n                >\r\n                    {name}\r\n                </li>\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        const { peopleList } = this.state;\r\n\r\n        if (!peopleList) {\r\n            return <Spinner />\r\n        }\r\n\r\n        const items = this.renderItems(peopleList);\r\n\r\n        return (\r\n            <div className=\"border-list\">\r\n                <ul className=\"item-list list-group\">\r\n                    {items}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","import PersonDetails from './person-details';\r\n\r\nexport default PersonDetails;","import React, { Component } from 'react';\r\n\r\nimport \"./person-details.css\"\r\nimport SwapiService from './../../services/swapiServices';\r\n\r\nexport default class PersonDetails extends Component {\r\n\r\n    SwapiService = new SwapiService();\r\n\r\n    state = {\r\n        person: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updatePerson();\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.personId !== prevProps.personId) {\r\n            this.updatePerson();\r\n        }\r\n    };\r\n\r\n    updatePerson() {\r\n        const { personId } = this.props;\r\n        if (!personId) {\r\n            return;\r\n        }\r\n\r\n        this.SwapiService\r\n            .getPerson(personId)\r\n            .then((person) => {\r\n                this.setState({ person })\r\n            });\r\n    };\r\n\r\n    render() {\r\n\r\n        const { person } = this.state;\r\n\r\n        if (!this.state.person) {\r\n            return (\r\n                <div className=\"person-details card\">\r\n                    <div className=\"card-body\">\r\n                        <h4 className=\"text-white\">Select a character from the list</h4>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        const { id, name, gender,\r\n            birthYear, eyeColor } = person;\r\n\r\n        return (\r\n            <div className=\"person-details card\">\r\n                <img className=\"person-image\"\r\n                    alt=\"character\"\r\n                    src={`https://starwars-visualguide.com/assets/img/characters/${id}.jpg`} />\r\n                <div className=\"card-body\">\r\n                    <h3 className=\"text-white\">{name}</h3>\r\n                    <ul className=\"list-group list-group-flush\">\r\n                        <li className=\"list-group-item\">\r\n                            <span className=\"term\">Gender:</span>\r\n                            <span>{gender}</span>\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            <span className=\"term\">Birth Year:</span>\r\n                            <span>{birthYear}</span>\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            <span className=\"term\">Eye Color:</span>\r\n                            <span>{eyeColor}</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import App from \"./app\";\r\n\r\nexport default App;","import React, { Component } from 'react';\r\n\r\nimport Header from \"../header\";\r\nimport RandomPlanet from \"../random-planet\";\r\nimport ItemList from \"../item-list\";\r\nimport PersonDetails from \"../person-details\";\r\n\r\nimport \"./app.css\";\r\n\r\nexport default class App extends Component {\r\n\r\n    state = {\r\n        selectedPerson: null\r\n    };\r\n\r\n    onPersonSelected = (id) => {\r\n        this.setState({\r\n            selectedPerson: id\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <div className=\"container mt-4\">\r\n                    <RandomPlanet />\r\n\r\n                    <div className=\"row mb2\">\r\n                        <div className=\"col-md-6\">\r\n                            <ItemList onItemSelected={this.onPersonSelected} />\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <PersonDetails personId={this.state.selectedPerson} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './components/app/index';\r\n\r\nReactDOM.render(<App />,\r\n    document.getElementById('root'));"],"sourceRoot":""}